pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('Build') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'npm run ci'
            }
          }
          archiveArtifacts artifacts: '**/integrations/standalone/build/**', allowEmptyArchive: true
          currentBuild.description = "<a href=${BUILD_URL}artifact/integrations/standalone/build/index.html>&raquo; Variables Editor</a>" 

          withChecks('ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }

    stage('Publish (NPM)') {
      when {
        expression { isReleaseOrMasterBranch() && currentBuild.changeSets.size() > 0 }
      }
      steps {
        script {
          docker.build('node', '-f build/Dockerfile .').inside {
            sh 'npm run build'
            sh 'git checkout .'
            withCredentials([string(credentialsId: 'npmjs-registry.ivyteam.ch-auth-token', variable: 'NPM_AUTH_TOKEN')]) {
              sh 'npm set "//npmjs-registry.ivyteam.ch/:_authToken = $NPM_AUTH_TOKEN"'
              sh 'npm run publish:next'
            }
          }
        }
      }
    }
  }

  post {
    success {
      cleanWs()
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
